# Repo

## usage: repo COMMAND [ARGS]

The most commonly used repo commands are:

    abandon     Permanently abandon a development branch
    branch(es)  View current topic branches
    checkout    Checkout a branch for development
    cherry-pick Cherry-pick a change.
    diff        Show changes between commit and working tree
    download    Download and checkout a change
    grep        Print lines matching a pattern
    info        Get info on the manifest branch, current branch or unmerged branches
    init        Initialize repo in the current directory
    list        List projects and their associated directories
    overview    Display overview of unmerged project branches
    prune       Prune (delete) already merged topics
    rebase      Rebase local branches on upstream branch
    smartsync   Update working tree to the latest known good revision
    stage       Stage file(s) for commit
    start       Start a new branch for development
    status      Show the working tree status
    sync        Update working tree to the latest revision
    upload      Upload changes for code review

## Basic Setup

    repo init -u https://git.yourandroidsource.com/path/to/Android/manifest -b branch-4.2.2_r1-drivenow
    repo sync --no-clone-bundle
    repo start default --all

## Basic Workflow

* Use `repo start` to start a new topic branch.
* Edit the files.
* Use `git add` to stage changes.
* Use `git commit` to commit changes.
* Use `repo upload` to upload changes to the review server.


# Repo-Commands

## init repo (install in current dir and fetch manifest)

    $ repo init -u URL [OPTIONS]
      Options:
        -u: specify a URL from which to retrieve a manifest repository.
        -m: select a manifest file within the repository.
            If no manifest name is selected, the default is default.xml.
        -b: specify a revision, i.e., a particular manifest-branch

## abandon any changes (commits) that have not been uploaded

    $ repo abandon <branch name>

## Start

    $ repo start <branch> <project>

Begins a new branch for development, starting from the revision specified in the manifest.

  * The `BRANCH_NAME` argument should provide a short description of the change
                    you are trying to make to the projects.If you don't know,
                    consider using the name default.
  * The `PROJECT_LIST` specifies which projects will participate in this topic branch.

    $ repo start default --all

begins a new branch of development, starting from the revision specified in the manifest,
just like "git checkout -b <branch name> path/<branch name>"


### To verify that your new branch was created:

    $ repo status

## Uploads committed changes to the remote review server

    $ repo upload <project name>

## To see a list of existing branches

    $ repo branches

## To see uncommitted edits

    $ repo diff

## Synchronizing your client

### To synchronize the files for all available projects:

    $ repo sync [PROJECT0 PROJECT1 PROJECT2 ...]
      Options:
        -d: switch specified projects back to the manifest revision.
            Helpful if the project is currently on a topic branch, but the manifest revision is temporarily needed.
        -s: sync to a known good build as specified by the manifest-server element in the current manifest.
        -f: proceed with syncing other projects even if a project fails to sync.

## switch to different repo branch

    $ repo init -u https://giturl/manifest -b otherbranch

## Uploading changes to Gerrit

### Before uploading, update to the latest revisions, next run upload

    $ repo sync
    $ repo upload

## repo prune

safely remove stale topic branches
Prunes (deletes) topics that are already merged.

    $ repo prune

## repo download

Downloads the specified change from the review system and makes it available in your project's local working directory.

    $ repo download TARGET CHANGE

## repo forall

Executes the given shell command in each project.

    $ repo forall [PROJECT_LIST] -c COMMAND
      Options:
        -c: command and arguments to execute.
            The command is evaluated through /bin/sh and any arguments after it
            are passed through as shell positional parameters.
        -p: show project headers before output of the specified command.
            This is achieved by binding pipes to the command's stdin, stdout,
            and sterr streams, and piping all output into a continuous stream
            that is displayed in a single pager session.
        -v: show messages the command writes to stderr.

The following additional environment variables are made available by repo forall:

  * `REPO_PROJECT` is set to the unique name of the project.
  * `REPO_PATH` is the path relative to the root of the client.
  * `REPO_REMOTE` is the name of the remote sstem from the manifest.
  * `REPO_LREV` is the name of the revision from the manifest, translated
              to a local tracking branch. Used if you need to pass the manifest
              revision to a locally executed git command.
  * `REPO_RREV` is the name of the revision from the manifest, exactly as written in the manifest.











