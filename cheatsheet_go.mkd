Cheatsheet for GO
=================

# Strings

## custom "ToString" functionality

    type bin int

    func (b bin) String() string {
        return fmt.Sprintf("%b", b)
    }

    func main() {
        fmt.Println(bin(42))
    }

## efficiently concatenate string  

    var buffer bytes.Buffer
    for i := 0; i < 1000; i++ {
        buffer.WriteString("a")
    }
    fmt.Println(buffer.String())

## write multiline strings

    `line 1
    line 2
    line 3`

# Maps

## check if a map contains a key

    if val, ok := dict["foo"]; ok {
        //do something here
    }

##  test for a key without retrieving the value

    _, ok := m["route"]

## iterate over the contents of a map

    for key, value := range m {
        fmt.Println("Key:", key, "Value:", value)
    }

# Miscellaneous

## enums in go

    type Base int

    const (
            A Base = iota
            C
            T
            G
    )

## casting

    i := 5 // int
    f := float64(i)

## iterate over a range of integers

    for i := 1; i <= 10; i++ {
        fmt.Println(i)
    }

## For is Go's "while"

    package main

    import "fmt"

    func main() {
      sum := 1
      for sum < 1000 {
        sum += sum
      }
      fmt.Println(sum)
    }


# File I/O

## Read a file line by line

    if file, err := os.Open("test.txt"); err == nil {
      defer file.Close()
      // create a new scanner and read the file line by line
      scanner := bufio.NewScanner(file)
      for scanner.Scan() {
          log.Println(scanner.Text())
      }
      if err = scanner.Err(); err != nil {
        log.Fatal(err)
      }
    } else {
      log.Fatal(err)
    }

# Slices

## iterate over slice

    // Allocate the top-level slice.
    picture := make([][]uint8, YSize) // One row per unit of y.
    // Loop over the rows, allocating the slice for each row.
    for i := range picture {
      picture[i] = make([]uint8, XSize)
    }

## check if element is in slice

    func stringInSlice(a string, list []string) bool {
        for _, b := range list {
            if b == a {
                return true
            }
        }
        return false
    }


Since the introduction of the ` append ` built-in,
most of the functionality of the ` container/vector ` package, which was removed in Go 1,
can be replicated using ` append ` and ` copy `.

Here are the vector methods and their slice-manipulation analogues:

## AppendVector

    a = append(a, b...)

## Copy

    b = make([]T, len(a))
    copy(b, a)
    // or
    b = append([]T(nil), a...)

## Cut

    a = append(a[:i], a[j:]...)

## Delete

    a = append(a[:i], a[i+1:]...)
    // or
    a = a[:i+copy(a[i:], a[i+1:])]

## Delete without preserving order

    a[i], a = a[len(a)-1], a[:len(a)-1]

    ** NOTE** If the type of the element is a _pointer_
    or a struct with pointer fields, which need to be garbage collected,
    the above implementations of ` Cut ` and ` Delete ` have a potential
    _memory leak_ problem: some elements with values are still
    referenced by slice ` a ` and thus can not be collected. The following code can fix this problem:

## Cut

    copy(a[i:], a[j:])
    for k, n := len(a)-j+i, len(a); k < n; k++ {
      a[k] = nil // or the zero value of T
    }
    a = a[:len(a)-j+i]

## Delete

    copy(a[i:], a[i+1:])
    a[len(a)-1] = nil // or the zero value of T
    a = a[:len(a)-1]
    // or, more simply:
    a[len(a)-1], a = nil, append(a[:i], a[i+1:]...)

## Delete without preserving order

    a[i], a[len(a)-1], a = a[len(a)-1], nil, a[:len(a)-1]

## Expand

    a = append(a[:i], append(make([]T, j), a[i:]...)...)

## Extend

    a = append(a, make([]T, j)...)

## Insert

    a = append(a[:i], append([]T{x}, a[i:]...)...)

**NOTE** The second ` append ` creates a new slice with its own underlying storage and  copies elements in ` a[i:] ` to that slice, and these elements are then copied back to slice ` a ` (by the first ` append `). The creation of the new slice (and thus memory garbage) and the second copy can be avoided by using an alternative way:

## Insert

    s = append(s, 0)
    copy(s[i+1:], s[i:])
    s[i] = x

## InsertVector

    a = append(a[:i], append(b, a[i:]...)...)

## Pop

    x, a = a[len(a)-1], a[:len(a)-1]

## Push

    a = append(a, x)

## Shift

    x, a := a[0], a[1:]

## Unshift

    a = append([]T{x}, a...)

## Additional Tricks

### Filtering without allocating

This trick uses the fact that a slice shares the same backing array
and capacity as the original, so the storage is reused for the filtered slice. Of course,
the original contents are modified.

    b := a[:0]
    for _, x := range a {
      if f(x) {
        b = append(b, x)
      }
    }

### Reversing

To replace the contents of a slice with the same elements but in reverse order:

    for i := len(a)/2-1; i >= 0; i-- {
      opp := len(a)-1-i
      a[i], a[opp] = a[opp], a[i]
    }

The same thing, except with two indices:

    for left, right := 0, len(a)-1; left < right; left, right = left+1, right-1 {
      a[left], a[right] = a[right], a[left]
    }


## sources

* https://github.com/golang/go/wiki/SliceTricks
* http://stackoverflow.com/questions/21950244/is-there-a-way-to-iterate-over-a-range-of-integers-in-golang

